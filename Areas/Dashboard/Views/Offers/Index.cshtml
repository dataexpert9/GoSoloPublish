@model BasketWebPanel.Areas.Dashboard.Models.AddPhotographersBindingModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="right_col" role="main">
    <div class="row">
        <input id="prodId" type="hidden" name="Product.Id" value="@Model.Id" />
        <div id="AddUpdateDiv" class="col-md-12 col-xs-12">
            <div class="alert alert-success" id="success-alert" hidden>
                <button type="button" class="close" data-dismiss="alert">x</button>
                <strong>Success! </strong><span> </span>
            </div>
            <div class="alert alert-error" id="error-alert" hidden>
                <button type="button" class="close" data-dismiss="alert">x</button>
                <strong>Error! </strong> <span> </span>
            </div>
            <style>
                input[type=number]::-webkit-inner-spin-button,
                input[type=number]::-webkit-outer-spin-button {
                    -webkit-appearance: none;
                    -moz-appearance: none;
                    appearance: none;
                    margin: 0;
                }
            </style>
            @using (Ajax.BeginForm("Index", "Categories", new AjaxOptions { OnSuccess = "OnSuccessProductInsertion", OnFailure = "OnFailedInsertion", LoadingElementId = "divLoader" }, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="x_panel">
                    <div class="x_title">

                        @if (Model.Id == 0)
                        {
                            <h3>Add New Photographer</h3>
                        }
                        else
                        {
                            <h3>Edit Photographer</h3>
                        }



                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        <br />
                        @Html.HiddenFor(x=>x.Id)
                        @*<input type="hidden" name="Model.Id" value="@Model.Id" />*@
                        <div class="row">
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Email Address</label>
                                @*<input type="text" autofocus data-val="true" class="form-control input-validation-error" name="Product.Name" id="ProductName" data-val-required="This field is required" placeholder="Product Name" value="@Model.Product.Name">*@
                                @if (Model.Id == 0)
                                {
                                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @id = "", @placeholder = "Email Adddress", @type = "text" })
                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })

                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @id = "", @placeholder = "Email Adddress", @type = "text", @readOnly = "readOnly" })
                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })

                                }

                            </div>
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Password</label>
                                @* <input type="text" data-val="true" class="form-control input-validation-error" name="Price" id="Price" data-val-required="Price is required" placeholder="Product Price" value="@Model.Price">*@
                                @if (Model.Id == 0)
                                {
                                    @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @id = "", @placeholder = "Password", @type = "password" })
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @id = "", @placeholder = "Password", @type = "password", @readOnly = "readOnly" })
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Full Name</label>
                                @*<input type="text" autofocus data-val="true" class="form-control input-validation-error" name="Product.Name" id="ProductName" data-val-required="This field is required" placeholder="Product Name" value="@Model.Product.Name">*@
                                @Html.TextBoxFor(x => x.Name, new { @class = "form-control", @id = "", @placeholder = "Photographer Name", @type = "text" })
                                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Age</label>
                                @* <input type="text" data-val="true" class="form-control input-validation-error" name="Price" id="Price" data-val-required="Price is required" placeholder="Product Price" value="@Model.Price">*@
                                @Html.TextBoxFor(x => x.Age, new { @class = "form-control", @id = "Price", @placeholder = "Photographer's Age", @type = "text" })
                                @Html.ValidationMessageFor(m => m.Age, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Phone Number</label>
                                @*<input type="text" autofocus data-val="true" class="form-control input-validation-error" name="Product.Name" id="ProductName" data-val-required="This field is required" placeholder="Product Name" value="@Model.Product.Name">*@
                                @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", @id = "Price", @placeholder = "Phone Number", @type = "text" })
                                @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Full Address</label>
                                @* <input type="text" data-val="true" class="form-control input-validation-error" name="Price" id="Price" data-val-required="Price is required" placeholder="Product Price" value="@Model.Price">*@
                                @Html.TextBoxFor(x => x.Address1, new { @class = "form-control", @id = "", @placeholder = "Photographer's Address", @type = "text" })
                                @Html.ValidationMessageFor(m => m.Address1, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>City</label>
                                @*<input type="text" autofocus data-val="true" class="form-control input-validation-error" name="Product.Name" id="ProductName" data-val-required="This field is required" placeholder="Product Name" value="@Model.Product.Name">*@
                                @Html.TextBoxFor(x => x.City, new { @class = "form-control", @id = "", @placeholder = "Resident Of", @type = "text" })
                                @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <label>Country</label>
                                @* <input type="text" data-val="true" class="form-control input-validation-error" name="Price" id="Price" data-val-required="Price is required" placeholder="Product Price" value="@Model.Price">*@
                                @Html.TextBoxFor(x => x.Country, new { @class = "form-control", @id = "", @placeholder = "Country", @type = "text" })
                                @Html.ValidationMessageFor(m => m.Country, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                           
                            <div class="col-xs-12 col-md-12 col-xs-12">
                                <!-- image-preview-filename input [CUT FROM HERE]-->
                                @*@if (Model.Product.Id == 0)
                                    {*@
                                <div id="UploadImage" hidden>
                                    <label>Upload Tourist Image</label>
                                    <div>
                                        <div class="input-group image-preview" style="margin-bottom:0px">
                                            <input type="text" name="Product.Image" id="txtImageUrl" data-val="true" data-val-required="Please select an image" class="form-control image-preview-filename input-validation-error" readonly> <!-- don't give a name === doesn't send on POST/GET -->
                                            <span class="input-group-btn">
                                                <!-- image-preview-clear button -->
                                                <button type="button" id="clearImage" class="btn btn-default image-preview-clear" onclick="ClearImage()" style="display:none;">
                                                    <span class="glyphicon glyphicon-remove"></span> Clear
                                                </button>
                                                <!-- image-preview-input -->
                                                <div class="btn btn-default image-preview-input">
                                                    <span class="glyphicon glyphicon-folder-open"></span>
                                                    <span class="image-preview-input-title">Browse</span>
                                                    <input type="file" accept="image/png, image/jpeg, image/gif" onchange="UploadImage()" id="fileInput" name="Image" /> <!-- rename it -->
                                                </div>
                                            </span>
                                        </div>


                                    </div>

                                    <!-- /input-group image-preview [TO HERE]-->
                                </div>
                                @*}
                                    else
                                    {*@
                                <div id="EditImage" hidden>
                                    <label>Product Image</label>
                                    <div class="row">
                                        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                            <img src="@ApiCall.BaseUrl@Model.ImageUrl" alt="" width="48" height="48">
                                        </div>
                                    </div>
                                    @* <button id="btnEditImg" onclick="EditDivDeletePic()" title="Edit" class="btn btn-primary btn-xs editButtons" data-title="Edit" data-productid="8" data-toggle="modal" data-target="#edit"><span class="glyphicon glyphicon-pencil"></span></button>*@
                                    <button id="btnDeleteImg" title="Delete" onclick="EditDivDeletePic()" class="btn btn-danger btn-xs deleteButtons" data-title="Delete" data-productid="8" data-toggle="modal" data-target="#deleteModal"><span class="glyphicon glyphicon-trash"></span></button>


                                    <div hidden id="HasImage1">@Model.ImageUrl</div>
                                </div>



                            </div>
                            <span style="padding-left:10px" id="ImageError" class="text-danger"></span>
                        </div>

                    </div>
                    @*<div class="ln_solid"></div>*@
                    <div class="form-group">
                        <div class="col-md-12 col-sm-12 col-xs-12 text-right">
                            <button id="btnReset" onclick="OnResetClick()" class="btn btn-primary" type="reset">Reset</button>
                            <button type="submit" class="btn btn-success">Submit</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery")

<script>

    $(document).ready(function () {

        var prodId = $("#prodId").val();
        var editImageVal = $('#HasImage1').text();
        if (prodId == "" || editImageVal == "") {
            $('#EditImage').hide();
            $('#UploadImage').show();
        }
        else {
            $('#EditImage').show();
            $('#UploadImage').hide();
            $("#txtImageUrl").val(editImageVal);
        }

        $("#Price, #Weight").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });

        $("#Price").bind("cut copy paste", function (e) {
            e.preventDefault();
        });
    });


    function OnResetClick() {
        $("#clearImage").trigger("click");
        ClearValidationErrorMessages();
    }

    function OnSuccessProductInsertion() {
        //$("#success-alert").append("Store updated successfully.");
        window.location.href = "@Url.Action("ManageOffers", "Offers")";

        //$("#success-alert").fadeTo(2000, 500).slideUp(500, function () {
        //    $("#success-alert").slideUp(500);
        //});
        //$("#ProductName").val('');
        //$("#Price").val('');
        //$("#CatId").val('0');
        //$("#clearImage").trigger("click");
        //$("#UploadImage").show();
        //$("#EditImage").hide();
        //$("#ProductDescription").val('');
        //$("#Weight").val('');
    }

    function UploadImage() {
        var AllowedFileTypes = ["image/jpeg", "image/png", "image/jpg"];
        var formdata = new FormData(); //FormData object
        var fileInput = document.getElementById('fileInput');
        //Iterating through each files selected in fileInput
        var file = fileInput.files[0];
        //for (i = 0; i < fileInput.files.length; i++) {
        //    //Appending each file to FormData object
        //    formdata.append(fileInput.files[i].name, fileInput.files[i]);
        //}
        formdata.append(file.name, file);
        if (AllowedFileTypes.indexOf(file.type) == -1) {
            $("#ImageError").text("Only .Jpeg & .Png files are allowed.");
            $("#clearImage").trigger("click");
            return false;
        }
        else {
            $("#ImageError").text("");
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'Offers/UploadImage');
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    //alert(xhr.responseText);
                    document.getElementById("errImageUrl").innerHTML = '';
                    //$('.field-validation-error').inn.hide();
                }
            }
            return false;
        }
    }

    function ClearImage() {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'Offers/DeleteImage');
        xhr.send("Clear");
        $("#txtImageUrl").val('');
    }

    function DeleteImageOnEdit() {

        var xhr = new XMLHttpRequest();
        var url = '@Url.Action("DeleteImage", "Offers")'
        xhr.open('POST', url);
        xhr.send("Clear");
        $("#txtImageUrl").val('');
    }



    function EditDivDeletePic() {

        $('#EditImage').hide();
        $('#UploadImage').show();
        DeleteImageOnEdit();
    }
    
</script>
